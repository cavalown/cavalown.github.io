{"pages":[{"title":"","text":"About","link":"/about.html"}],"posts":[{"title":"Docker基本操作","text":"Read: Docker專業養成https://ithelp.ithome.com.tw/articles/10191016 Install 安裝 Mac OS Docker 官網下載Docker for Mac壓縮檔(Docker.dmg)，直接解壓放到application資料夾，啟動應用程式即可。 Mac版本的Docker只要安裝好就包含了docker-compose，不用另外安裝》 Ubuntu 直接參考官方安裝方式，照做即可。 要注意的是，Ubuntu的Docker，docker-engine和docker-compose是要分開安裝的。 Image 映像檔 映像檔名稱：組成有三個部分： “Namespace/Repository:Tag：” Namespace: 印象檔的命名空間，通常會有建制印象的單位或人的名稱代號在裡面。 Repository: 印象檔的名稱，通常會和裡面包含的應用程式有關。 Tag:用以區分版本。 取得映像檔 下載docker映像檔：docker pull 未給予映像的命名空間時，會是下載Docker官方管理的映像。 未給予印象的tag時，會下載最新版本latest 12345$ sudo docker pull imageName# example:$ sudo docker pull ubuntu# example 有映像空間和tag$ sudo docker pull registry.hub.docker.com/ubuntu:latest 搜尋docker映像檔：docker search 透過搜尋官方的映像倉庫Docker hub 123$ docker search imageName# example:$ docker search php 搜尋的結果會包含幾項資訊： Name: 映像檔名稱。 Description: 描述。 Stars: 映像檔受歡迎程度。 Official: 是否為官方Docker維護的映像檔。 Automated: 映像檔是否自動建構。 常用指令：1. 檢視已存在的映象檔 $ sudo docker images * Repository: 名稱 * Tag: 標籤 * Image ID: id * Created: 建立時間 * Size: 大小 2. 刪除映像檔：$ sudo docker rmi id_or_name 若是此映像檔正有container在執行，則可用強制刪除的方式：$ sudo docker rmi -f id_or_name ，但一般來說不建議用此方式。 Repositoryuse dockerhub( to be continue…) Container 建立container並運行1. 前台運行，可在終端機上觀察到 1$ sudo docker run -it image_name 2. 後台運行 1$ sudo docker run -d image_name 3. 為container命名 1$ sudo docker run -d --name container_name image_name 停止container1$ sudo docker stop id_or_name 啟動container1$ sudo docker start id_or_name 重啟container = docker stop + docker start1$ sudo docker restart id_or_name 刪除container 刪除已停止的container 1$ sudo docker rm id_or_name 強制刪除運行中的container 1$ sudo docker rm -f id_or_name 常用指令1. 檢視container 檢視所有運行中的container 1$ sudo docker ps 檢視所有container 1$ sudo docker ps -a 檢視最後一個建立的container 1$ sudo docker ps -l 檢視最後x個建立的container 1$ sudo docker ps -n x Data Volume 資料卷因為docker container本身並非永久存在，一旦刪除裡面的資料和log會消失，但有時候會有需要保存的資料，就會需要透過volumn將container裡面的資料夾和外面連動，即便container掛掉或刪掉，該保留的資料並不會受影響。 建立volume1. 隨container建立 (-v folder_path) 使用 -v 指定掛載的資料夾 1$ sudo docker create --name container_name -v folder_path image_name 可同時掛載多個資料夾 1$ sudo docker create --name container_name -v folder1 -v folder2 image_name 2. 直接建立volume(之後啟動docker run 時，再指定掛載的資料夾。) 1$ sudo docker volume create --name volumn_name 掛載volumn1. 將外部資料夾掛載到已經建立的volume 12345$ sudo docker volume create --name volume_name$ sudo docker run -it --name container_name -v out_folder:volume_name image name# example:$ sudo docker volume create --name html$ sudo docker run -it --name website -v /home/users/xxxx/websites/html:html ngix 2. Volume container ( –volumes-from) (to be continue…) 刪除volomn1. 直接刪除volume 不建議這種方式，因為可能有其他container正在使用這個volume而導致錯誤 1$ sudo docker volume rm volume_name 2. 隨container一起刪除volume(-v) 建議採用此種方式！ 1$ sudo docker rm -v container_name Dockerfile用來自動化的建立image 建立並編輯Dockerfile 用dockerfile建立image 此指令會自動尋找當前目錄的dockerfile 1$ sudo docker build image_name Docker Compose使用“docker-compose.yml”檔案啟動多個container。 Docker 實際範例PostgresqlOfficial Document 拉取image 1$ docker pull postgres 啟動container(可搭配 -itd, –rm。) 1$ docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres 連進去已啟動的container 1$ docker exec -it {container id} psql -U $PG_USER","link":"/20210323-Docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"},{"title":"NodeJS-安裝與版本切換","text":"要安裝Node有兩種方式 官網下載，直接安裝。官網下載頁面 透過nvm(Node的版本管理工具)來安裝。 建議使用nvm安裝，因為可以很輕鬆的轉換多個版本的node，會方便許多。 安裝nvm首先要先安裝nvm，再藉由nvm安裝需要的node版本。官方安裝教學 下載NVM1curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | b 設定NVM的環境變數12export NVM_DIR=&quot;$([ -z &quot;${XDG_CONFIG_HOME-}&quot; ] &amp;&amp; printf %s &quot;${HOME}/.nvm&quot; || printf %s &quot;${XDG_CONFIG_HOME}/nvm&quot;)&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; 啟動(根據環境)12345# bash環境source ~/.bashrc# zsh環境source ~/.zshrc 版本管理 列出可安裝的node版本 123nvm ls-remote# 檢視有長期支援的版本nvm ls-remote --lts 檢視現有環境已安裝的node版本 1nvm ls ![nvm ls 範例圖片](https://i.imgur.com/cZeJuhe.png =210x208) 安裝指定版本的node 1234nvm install version-number# 例如：nvm install 12.22.9 快速使用特定版本node 123nvm use version-number# 例如：nvm use 12.22.9 :::danger這是指定當下的shell使用版本，若關閉shell或是另外開啟其他的shell，將會使用預設版本的node。::: 設定預設的node為特定版本 123nvm alias default version-number# 例如：num alias default 12.22.9 可以再次使用nvm ls檢查預設的版本是否設定完成。","link":"/20220311-NodeJS-%E5%AE%89%E8%A3%9D%E8%88%87%E7%89%88%E6%9C%AC%E5%88%87%E6%8F%9B/"},{"title":"Python - Guess The Number","text":"不急著寫程式，我們先來思考一下對於初學者來說，猜數字常常是學習判斷式(if…else…)和迴圈(while)很常遇到的題目。我其實很建議在遇到題目的時候不要一股腦的去寫程式，而是先思考，這個遊戲的使用者面對的”狀況”和會有的”行為表現”，還有程式應該如何佈建好”場景”來應付使用者的行為。 講到這裡，對初學者來說應該還是非常的模糊！ 不就是寫寫程式嗎，為什麼要思考這麼多呢？ 因為不管是什麼程式，都是為了達成”特定目標”去設計的，然而這條路上往往是非常曲折，你預想是A，但有可能就是會出現B、C、D…..等層出不窮的可能性，這些可能性其實就和使用者的行為有很大的關聯性！ 舉例來說，「我要去全聯買義美無糖豆漿。」這個任務，看起來很簡單就是要去全聯買豆漿而已啊，但就這句話就可以拆解出好多個可能性！像是： 我要怎麼去呢 -&gt; 開車嗎？騎車？走路？還是？ 要去哪一家呢 -&gt; 可能我家附近有兩家，一家比較近但很難停車；一家比較遠但很多停車格。 到了全聯可能又會出現一些狀況，像是： 義美無糖豆漿沒了 -&gt; 不買？買替代品？ 替代品有 -&gt; 義美低糖豆漿？統一無糖豆漿？ 以上是有順利到達全聯的情況，萬一我中途出了車禍呢？ 哇！有沒有發現～原來人腦真的比電腦厲害，可以處理這麼多情況呢！感嘆完人類的腦，那現在我們就來拆解”猜數字”這個遊戲吧！ 猜數字怎麼玩簡單的說，就是讓使用者猜中預計的答案，不管猜得比答案大或小都會提示接下來猜的方向。那我們就會需要 A. 答案B. 使用者猜的數字 這裡我們要先思考該怎麼決定這個答案呢？只要是數字就可行了嗎？理論上來說，只要是數字都是可以讓這個遊戲被執行的，但如果我們沒有讓數字有範圍的限制，有可能會出現23456789087654321或是-22222222244444這樣的數字，這樣真的比中威力彩和大樂透頭獎還要困難啊！ 所以我們來幫遊戲加一點限制吧！我們預計讓答案介於1~100之間。 A. 答案：1~100 那使用者的答案呢？只要告訴他們猜在1~100之間就可以了吧？！理想總是很性感，現實總是很骨感啊！你應該曾經有輸入帳號密碼輸錯誤的經驗吧？人就是會手殘啊！！！！！！！！！！！！！！ 另外，有沒有可能有些人就是硬要輸入不符合範圍的數字呢？我要輸入-100，你要打我嗎？有沒有可能有人更誇張，老子就是硬要輸入英文，你奈何得了我嗎？ 所以！我們也必須幫使用者的輸入做一些限制！ B. 使用者猜的數字：1~100, 只能數字不能是文字或其他符號！ 太好了！我們有了基礎的條件，可以試著寫寫看程式了。 程式碼指定變數給答案和使用者猜的數字1234567import random# 指定答案為1~100之間的整數answer = random.randint(1,100)# input接到的東西都會轉成string，所以使用int()轉成數字。userGuess = int(input(&quot;請輸入你的數字(1~100):&quot;)) 處理使用者輸入非數字的錯誤情形試著執行程式並且輸入任意的文字(example: apple)，會出現類似下面的錯誤訊息：ValueError: invalid literal for int() with base 10: 'apple'這是因為’apple’是字串，沒辦法轉成數字形式！這時候我們可以使用”try…except…”，來幫助我們處理這些例外的情況！ 123456789import randomanswer = random.randint(1,100)try: userGuess = int(input(&quot;請輸入你的數字(1~100):&quot;))# 把錯誤情況抓出來，並指示在這樣的情況如何因應。這裡是提示使用者要輸入數字。except ValueError as err: print(&quot;請輸入數字！&quot;) 判斷是否猜中數字123456789101112131415import randomanswer = random.randint(1,100)print(&quot;答案是&quot;, answer)try: userGuess = int(input(&quot;請輸入你的數字(1~100):&quot;)) if userGuess == answer: print(&quot;恭喜～猜對了！&quot;) elif userGuess &gt; answer: print(&quot;猜太大了！&quot;) else: print(&quot;猜太小了！&quot;)except ValueError as err: print(&quot;請輸入數字！&quot;) 這裡使用了if…elif…else來做為判斷猜的數字和答案的大小關係。另外加入了print(&quot;答案是&quot;, answer)，來觀察是不是有正確判斷，可以在確認後刪除。 使用迴圈讓使用者可以多次輸入數字沒錯，現在可以正確判斷使用者是不是輸入數字了！那我們加上迴圈，讓使用者可以不斷的輸入數字吧！ 123456789101112131415161718import randomanswer = random.randint(1,100)while True: try: userGuess = int(input(&quot;請輸入你的數字(1~100):&quot;)) if userGuess == answer: print(&quot;恭喜～猜對了！&quot;) break elif userGuess&gt;100 or userGuess&lt;1: print(&quot;請輸入介於1~100的數字&quot;) elif userGuess &gt; answer: print(&quot;猜太大了！&quot;) else: print(&quot;猜太小了！&quot;) except ValueError as err: print(&quot;請輸入數字！&quot;) 在這裡有幾個需要注意的地方: 為避免使用者輸入的數字超過我們設定的範圍，所以才需要設定 elif userGuess &gt;100 or userGuess&lt;1 請注意，if 判斷是都是從上而下作判斷，在這裡elif userGuess &gt;100 or userGuess&lt;1必定要擺在elif userGuess &gt; answer之前。不然會出現因為userGuess同時大於answer和100的狀況時，因為先判斷了userGuess&gt;answer，而只提示&quot;猜太大了！&quot;，卻沒有發現使用者輸入的數字根本不符合規定的數字區間。 在猜對的地方加入了break，可以終止迴圈，也就是 蓋上一張牌 結束這回合。 給使用者更加具體的提示如果你已經學會並且可以完成上面的步驟，你已經有基本的判斷式和迴圈概念，接下來要準備進階一點點了！我們希望能在使用者猜出比答案大或是小的數字同時，給予使用者新的猜測區間。也就是說，我們要讓猜測的結果去改變(取代)原本的數字區間上限100和下限1。 1234567891011121314151617181920212223242526import randomanswer = random.randint(1,100)# 假定最大數字為100，最小數字為1bottomNumber = 1topNumber = 100while True: try: userGuess = int(input(f&quot;請輸入你的數字{bottomNumber}~{topNumber}:&quot;)) if userGuess == answer: print(&quot;恭喜～猜對了！&quot;) break elif userGuess&gt;topNumber or userGuess&lt;bottomNumber: print(f&quot;請輸入介於{bottomNumber}~{topNumber}的數字&quot;) elif userGuess &gt; answer: print(&quot;猜太大了！&quot;) topNumber = userGuess - 1 print(f&quot;請輸入你的數字{bottomNumber}~{topNumber}:&quot;) else: print(&quot;猜太小了！&quot;) bottomNumber = userGuess + 1 print(f&quot;請輸入你的數字{bottomNumber}~{topNumber}:&quot;) except ValueError as err: print(&quot;請輸入數字！&quot;) 這樣，就完成了不斷更新topNumber和bottomNumber！ 恭喜，你完成一個很棒的遊戲喔！ 最後再補上個小東西，鬧一下！不加上也是沒關係的唷！ 1234567891011121314151617181920212223242526272829import randomanswer = random.randint(1,100)# 假定最大數字為100，最小數字為1bottomNumber = 1topNumber = 100while True: try: if bottomNumber == topNumber: print(f&quot;別鬧了，答案只剩下：{topNumber}&quot;) break userGuess = int(input(f&quot;請輸入你的數字{bottomNumber}~{topNumber}:&quot;)) if userGuess == answer: print(&quot;恭喜～猜對了！&quot;) break elif userGuess&gt;topNumber or userGuess&lt;bottomNumber: print(f&quot;請輸入介於{bottomNumber}~{topNumber}的數字&quot;) elif userGuess &gt; answer: print(&quot;猜太大了！&quot;) topNumber = userGuess - 1 print(f&quot;請輸入你的數字{bottomNumber}~{topNumber}:&quot;) else: print(&quot;猜太小了！&quot;) bottomNumber = userGuess + 1 print(f&quot;請輸入你的數字{bottomNumber}~{topNumber}:&quot;) except ValueError as err: print(&quot;請輸入數字！&quot;)","link":"/20220115-Python-GuessTheNumber/"}],"tags":[{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"NodeJS","slug":"NodeJS","link":"/tags/NodeJS/"},{"name":"Python","slug":"Python","link":"/tags/Python/"}],"categories":[]}